serverID = 4 -- ID for the master computer
rSide = "right" -- Side the modem is on for the turtle

function sendReply(msg)
		
		local msgSent = false
		while msgSent == false do
			rednet.send(serverID,msg)
			local senderId, message = rednet.receive(2)
			if message == "ack" then
				msgSent = true
			end
		end

end

function place()
	print("Placing the miner")
	turtle.select(1)
	if turtle.place() == true then
		sendReply("Placed")
	else 
		sendReply("Error")
	end
	
end

function dump()
	for i = 1,16 do
		turtle.select(i)
		turtle.dropDown()
	end
end

function isEmpty()
	local num = 0 
	for i = 1,16 do
	num = num + turtle.getItemCount(i)
	end
	
	if num > 0 then
	return false
	else
	return true
	end
end

function dumpCycle()
	empty = false
	while empty == false do
		print("Dumping contents")
		dump()
		empty = isEmpty()
		sleep(1)
	end
	return true
end

function endCycle()
	-- Started by rednet msg
	--Chek ifsomething is infront (like a miner)
	if turtle.detect() then
		--Miner infront, empty iventory
		dumpCycle()
		local num = turtle.getItemCount(1)
		while num ~= 0 do
			dmpCycle()
		end
		--Pickp miner
		turtle.select(1)
		turtle.dig()
	end
	--Reply to server
	print("Ready to go")
	sendReply("Clear")
end




rednet.open(rSide)
running = true
while running do
	--Listen for redstone events
		local event, p1, p2, p3 = os.pullEvent()
			if event == "rednet_message" and p2 == "Start" then
				place()
			elseif event == "rednet_message" and p2 == "End" then
				endCycle()
			elseif event == "char" and p1 == "s" then -- Manual run
				place()
			elseif event == "char" and p1 == "e" then -- Manual run
				endCycle()
			elseif event == "char" and p1 == "r" then
				print("Rebooting in 2")
				sleep(2)
				os.restart()
			elseif event == "char" and p1 == "x" then
				print("Exiting")
				running = false
			end
end